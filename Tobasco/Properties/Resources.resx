<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnymonousPropertySet" xml:space="preserve">
    <value>AnymonousPropertySet</value>
  </data>
  <data name="ClassDapperMethod" xml:space="preserve">
    <value>public override ExpandoObject ToAnonymous()
{
	dynamic anymonous = base.ToAnonymous();
	%AnymonousPropertySet%
	return anymonous;
}</value>
  </data>
  <data name="ClassFile" xml:space="preserve">
    <value>%Namespaces%

namespace %OwnNamespace%
{
	%Attributes%
	public %Abstract% partial %Type% %ClassName%%Extension% %BaseClass%
	{
		%Constructor%		
		%Properties%		
		%Methods%	
	}
}</value>
  </data>
  <data name="ConnectionFactoryGetConnection" xml:space="preserve">
    <value>public SqlConnection GetConnection()
        {
            SqlConnection connection = null;
            SqlConnection tempConnection = null;
            try
            {
                tempConnection = new SqlConnection(_connectionstring);
                tempConnection.Open();
                connection = tempConnection;
                tempConnection = null;
            }
            finally
            {
                tempConnection?.Dispose();
            }

            return connection;
        }</value>
  </data>
  <data name="Constructor" xml:space="preserve">
    <value>%ConstructorFields%
public %Name%(%ConstructorParameters%)
{
	%FieldWithParameter%
	%CustomImplementation%
}</value>
  </data>
  <data name="DependencyInjection" xml:space="preserve">
    <value>[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506: AvoidExcessiveClassCoupling", Justification = "Generated file")]
public override void Load()
{
    %DIParams%
}</value>
  </data>
  <data name="GenericRepositoryBulkSave" xml:space="preserve">
    <value>public IEnumerable&lt;T&gt; Save(IEnumerable&lt;T&gt; entities)
{
	var enumerable = entities as IList&lt;T&gt; ?? entities.ToList();
	foreach (var entity in enumerable)
	{
		Save(entity);
	}
	return enumerable;
}</value>
  </data>
  <data name="GenericRepositoryDelete" xml:space="preserve">
    <value>public void Delete(T entity)
{
	using (var connection = ConnectionFactory.GetConnection())
	{
		connection.Execute($"[dbo].[{ typeof(T).Name}_Delete]",
			new {entity.Id, entity.RowVersion, entity.ModifiedBy },
			commandType: CommandType.StoredProcedure);
	}
}</value>
  </data>
  <data name="GenericRepositoryGetById" xml:space="preserve">
    <value>public T GetById(long id)
{
	T entity;
	using (var connection = ConnectionFactory.GetConnection())
	{
		entity = connection.QuerySingle&lt;T&gt;($"[dbo].[{ typeof(T).Name}_GetById]",
			new {Id = id},
			commandType: CommandType.StoredProcedure);
	}
	entity.MarkOld();
	return entity;
}</value>
  </data>
  <data name="GenericRepositoryInsert" xml:space="preserve">
    <value>public T Insert(T entity)
{
	using (var connection = ConnectionFactory.GetConnection())
	{
		connection.Query&lt;long, byte[], T&gt;($"[dbo].[{typeof(T).Name}_Insert]", (id, rowversion) =&gt;
		{
			entity.Id = id;
			entity.RowVersion = rowversion;
			return entity;
		}, ToAnonymous(entity, false), splitOn: "RowVersion", commandType: CommandType.StoredProcedure);
	}
	entity.MarkOld();
	return entity;
}</value>
  </data>
  <data name="GenericRepositoryQueryMultipleT" xml:space="preserve">
    <value>public IEnumerable&lt;T&gt; QueryMultiple(string StoredProcedure, DynamicParameters parameters, Func&lt;GridReader, IEnumerable&lt;T&gt;&gt; readerFunc)
        {
            using (var connection = ConnectionFactory.GetConnection())
            {
                return readerFunc(connection.QueryMultiple(StoredProcedure, parameters, commandType: CommandType.StoredProcedure));
            }
        }</value>
  </data>
  <data name="GenericRepositorySave" xml:space="preserve">
    <value>public T Save(T entity)
{
	if(entity.IsDeleted)
	{
		Delete(entity);
		return entity;
	}
	if(entity.IsNew)
	{
		return Insert(entity);
	}
	if(entity.IsDirty)
	{
		return Update(entity);
	}
	return entity;
}</value>
  </data>
  <data name="GenericRepositoryToAnonymous" xml:space="preserve">
    <value>private DynamicParameters ToAnonymous(T entity, bool includeRowVersion)
{
	dynamic anonymousEntity = entity.ToAnonymous();
	anonymousEntity.Id = entity.Id;
	var parameters = new DynamicParameters(anonymousEntity);
	if (includeRowVersion)
	{
		parameters.Add("RowVersion", entity.RowVersion, DbType.Binary);
	}
	return parameters;
}</value>
  </data>
  <data name="GenericRepositoryUpdate" xml:space="preserve">
    <value>public T Update(T entity)
{
	using (var connection = ConnectionFactory.GetConnection())
	{
		try
		{
			entity.RowVersion = connection.ExecuteScalar&lt;byte[]&gt;($"[dbo].[{ typeof(T).Name}_Update]",
				ToAnonymous(entity, true),
				commandType: CommandType.StoredProcedure);
		}
		catch(SqlException ex)
		{
			if (ex.Number == 50000 &amp;&amp; ex.Class == 16 &amp;&amp; ex.Message.Contains(" is al gewijzigd door een andere gebruiker."))
			{
				throw new DBConcurrencyException($"Dirty write detected while updating { typeof(T).Name} with id { entity.Id} at { DateTime.Now.ToString(CultureInfo.InvariantCulture)}");
			}
			else
			{
				throw;
			}
		}
	}
	entity.MarkOld();
	return entity;
}</value>
  </data>
  <data name="GetFullObjectByEntity" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].%TableName%_GetFullById
	@id bigint
AS
BEGIN

	%DeclareChilds%

	%Childs_GetById%

	%ChildCollection_GetByParentIdStp%

	SELECT Id,
		   [RowVersion],
           %StpPropertyNames%
		   [ModifiedBy],
		   [ModifiedOn]
	  FROM %TableName%
	 WHERE %TableName%.Id = @id;
END;</value>
  </data>
  <data name="InterfaceFile" xml:space="preserve">
    <value>%Namespaces%

namespace %OwnNamespace%
{
	%Attributes%
	public partial %Type% %InterfaceName%%Extension%
	{
		%Properties%
			
		%Methods%	
	}
}</value>
  </data>
  <data name="NinjectBinder" xml:space="preserve">
    <value>protected void NinjectBinder&lt;T, TY&gt;() where TY : T
{
    Bind&lt;T&gt;().To&lt;TY&gt;()%BindingScope%;
}</value>
  </data>
  <data name="PrivateDispose" xml:space="preserve">
    <value>private void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    // ReSharper disable once UseNullPropagation
                    if (_connection != null)
                    {
                        // ReSharper disable once InconsistentlySynchronizedField
                        _connection.Dispose();
                    }
                }

                _disposed = true;
            }
        }</value>
  </data>
  <data name="PropertyChildCollection" xml:space="preserve">
    <value>public List&lt;%PropertyValueType%&gt; %PropertyName% { get; } = new List&lt;%PropertyValueType%&gt;();</value>
  </data>
  <data name="PropertyDapperDefault" xml:space="preserve">
    <value>private %PropertyValueType% _%PropertyParameterName%;
%BusinessRules%
public %PropertyValueType% %PropertyName%
{
	get { return _%PropertyParameterName%; }
	set { SetField(ref _%PropertyParameterName%, value, nameof(%PropertyName%)); }
}</value>
  </data>
  <data name="PropertyDefault" xml:space="preserve">
    <value>%BusinessRules%
public %PropertyValueType% %PropertyName% { get; set; }</value>
  </data>
  <data name="PropertyReadonlyGuid" xml:space="preserve">
    <value>public %PropertyValueType% %PropertyName% { get; private set; }</value>
  </data>
  <data name="PublicDispose" xml:space="preserve">
    <value>public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }</value>
  </data>
  <data name="RepositoryGetById" xml:space="preserve">
    <value />
  </data>
  <data name="RepositoryGetFullByIdReader" xml:space="preserve">
    <value>internal static Dictionary&lt;long, %EntityName%&gt; Read(GridReader reader)
{
	%ChildReader%
	
	%ChildCollectionReader%

    var items = reader.Read((%ReaderParameters%) =&gt;
    {
        %ChildReadDictionary%

        %ChildCollectionReadDictionary%

        return item;
    }, splitOn: "%SplitOn%");

    return items.ToDictionary(x =&gt; x.Id);        
}</value>
  </data>
  <data name="RepositoryGetFullByIdReaderWithoutProp" xml:space="preserve">
    <value>internal static Dictionary&lt;long, %EntityName%&gt; Read(GridReader reader)
{
    return reader.Read&lt;%EntityName%&gt;().ToDictionary(x =&gt; x.Id);      
}</value>
  </data>
  <data name="RepositoryGetFullObjectById" xml:space="preserve">
    <value>public %EntityName% GetFullObjectById(long id)
{
    var parameters = new DynamicParameters();
    parameters.Add("id", id);
    return _genericRepository.QueryMultiple("%GetByIdStp%", parameters, x =&gt; Read(x).Values).SingleOrDefault();
}</value>
  </data>
  <data name="RepositoryGetFullyByIdChildCollectionReader" xml:space="preserve">
    <value>internal static Dictionary&lt;long, %EntityName%&gt; Read(GridReader reader)
{
	%ChildReader%
	
	%ChildCollectionReader%

    var items = reader.Read((%EntityName% item, %EntityName% returnItem) =&gt;
    {
        %ChildCollectionReadDictionary%

        return returnItem;
    });

    return items.ToDictionary(x =&gt; x.Id);        
}</value>
  </data>
  <data name="RepositorySave" xml:space="preserve">
    <value>public %EntityName% Save(%EntityName%  %EntityNameLowerCase%)
{
	%SaveChild%	
	%EntityNameLowerCase% = _genericRepository.Save(%EntityNameLowerCase%);	
	%SaveChildCollections%	
	return %EntityNameLowerCase%;
}</value>
  </data>
  <data name="RepositorySaveWithTransaction" xml:space="preserve">
    <value>public %EntityName% Save(%EntityName%  %EntityNameLowerCase%)
{
	using (var trans = new TransactionScope())
	{
		%SaveChild%		
		%EntityNameLowerCase% = _genericRepository.Save(%EntityNameLowerCase%);		
		%SaveChildCollections%				
		trans.Complete();
	}
	return %EntityNameLowerCase%;
}</value>
  </data>
  <data name="SqlDeleteStp" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[%TableName%_Delete]
		@Id [bigint]
       ,@RowVersion [rowversion]
       ,@ModifiedBy nvarchar(256)
AS
BEGIN
		SET NOCOUNT ON;
		
		DECLARE @Context varbinary(128) = CAST(CAST(ISNULL(@ModifiedBy, SUSER_SNAME()) AS char(256)) AS varbinary(256));
		
		DELETE 
		  FROM [dbo].%TableName%
		 WHERE %TableName%.Id = @Id
		   AND %TableName%.[RowVersion] = @RowVersion

		DECLARE @RowCountBig AS bigint = ROWCOUNT_BIG();
		
		SET CONTEXT_INFO 0x;
		
		IF @RowCountBig = 0
		BEGIN
            DECLARE @message AS nvarchar(2048) = CONCAT(QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)), '.', OBJECT_NAME(@@PROCID), N': '
													   ,N'Concurrency problem. '
                                                       ,N'The %TableName%-row with Id=', @Id, N' and RowVersion=', CAST(@RowVersion AS binary(8)), N' cannot be altered by ', @ModifiedBy, N'. '
                                                       ,N'The row was already modified or deleted by a different user.'
                                                        );
			THROW 55501, @message, 1;
		  END;
END;</value>
  </data>
  <data name="SqlGetByIdStp" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[%TableName%_GetById]
    @Id bigint
AS
BEGIN
    SET NOCOUNT ON;

	SELECT Id,
		   [RowVersion],
		   %StpPropertyNames%
		   ModifiedBy,
		   ModifiedOn
	  FROM [dbo].%TableName%
	 WHERE Id = @Id;
END;</value>
  </data>
  <data name="SqlGetByReferenceId" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].%TableName%_GetFullBy%ReferenceType%
	@ReferenceName bigint
AS
BEGIN

	%DeclareChilds%

	%Childs_GetById%

	%ChildCollection_GetByParentIdStp%

	SELECT Id,
		   [RowVersion],
           %StpPropertyNames%
		   [ModifiedBy],
		   [ModifiedOn]
	  FROM %TableName%
	 WHERE %TableName%.%ReferenceName% = @ReferenceName;
END;</value>
  </data>
  <data name="SqlHistorieTable" xml:space="preserve">
    <value>CREATE TABLE [dbo].[%TableName%_historie] (
    [Id]                          bigint             NOT NULL
   ,[RowVersion]                  binary(8)          NOT NULL
   %TableProperties%   
   ,[ModifiedBy]                  nvarchar (256)     NOT NULL
   ,[ModifiedOn]                  DATETIME2(7)       NOT NULL
   ,DeletedBy                     nvarchar(256)     NULL
   ,DeletedAt                     datetime2(7)      NULL
);</value>
  </data>
  <data name="SqlHistorieTableWithUid" xml:space="preserve">
    <value>CREATE TABLE [dbo].[%TableName%_historie] (
    [Id]                          bigint             NOT NULL
   ,[RowVersion]                  binary(8)          NOT NULL
   ,[Uid]                         uniqueidentifier   NOT NULL
   %TableProperties%   
   ,[ModifiedBy]                  nvarchar (256)     NOT NULL
   ,[ModifiedOn]                  DATETIME2(7)       NOT NULL
   ,DeletedBy                     nvarchar(256)      NULL
   ,DeletedAt                     datetime2(7)       NULL
);</value>
  </data>
  <data name="SqlInsertStp" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[%TableName%_Insert]
    @Id bigint output,
	%StpParameter%
    @ModifiedBy nvarchar(256)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT
      INTO [dbo].%TableName% 
	       (
			%StpPropertyNames%
			[ModifiedBy],
		    [ModifiedOn]
		   )
	OUTPUT Inserted.Id
		  ,Inserted.[RowVersion]
		  ,Inserted.ModifiedOn
    VALUES
         (
		   %StpParameterName%
           @ModifiedBy,
           SYSDATETIME()
          );
END;</value>
  </data>
  <data name="SqlInsertStpWithUid" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[%TableName%_Insert]
    @Id bigint output,
	%StpParameter%
    @ModifiedBy nvarchar(256)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT
      INTO [dbo].%TableName% 
	       (
			%StpPropertyNames%
			[ModifiedBy],
		    [ModifiedOn]
		   )
	OUTPUT Inserted.Id
              ,Inserted.[Uid]
		  ,Inserted.[RowVersion]
		  ,Inserted.ModifiedOn
    VALUES
         (
		   %StpParameterName%
           @ModifiedBy,
           SYSDATETIME()
          );
END;</value>
  </data>
  <data name="SqlMergeStp" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[%TableName%_Merge]
		@DataTable [dbo].[%TableName%MergeType] READONLY,
        @ModifiedBy nvarchar(256),
		@ModifiedOn datetime2(7),    
		@AbortOnConcurrency bit
AS
BEGIN
		SET NOCOUNT ON;
		
		IF OBJECT_ID('tempdb..#output') IS NOT NULL
		BEGIN
			DROP TABLE #output
		END
		
		CREATE TABLE #output 
					(Id                   int           NOT NULL PRIMARY KEY
	                 ,[RowVersion]         binary(8)     NOT NULL
					 %TableProperties%
                     ,Id_Intern           bigint        NULL
                     ,MergeAction         nvarchar(10)  NOT NULL -- 'INSERT', 'UPDATE', or 'DELETE'
                     ,WasDeleted          bit           NOT NULL
                     ,WasUpdated          bit           NOT NULL
                     )

	MERGE
     INTO [dbo].[%TableName%] WITH(HOLDLOCK) AS [Target]
    USING @DataTable AS [Source]
       ON [Source].Id = [Target].Id
	 WHEN MATCHED
	  AND ISNULL([Source].Delete_Flag, 'FALSE') = 'FALSE'
		  THEN UPDATE
				  SET %UpdateSetTableParemeters%
					  ModifiedBy     = @ModifiedBy,
                      ModifiedOn     = @ModifiedOn
	 WHEN MATCHED
      AND [Source].Delete_Flag = 'TRUE'
          THEN DELETE
	 WHEN NOT MATCHED BY TARGET
	      THEN INSERT
					 (
					 %StpPropertyNames%
					 ModifiedBy,
					 ModifiedOn
					 )
			   VALUES
					 (
					 %MergeSourcePropertyNames%
					 @ModifiedBy,
                     @ModifiedOn					 
					 )	 
	OUTPUT IIF($action = 'DELETE', deleted.Id, inserted.Id)
	      ,IIF($action = 'DELETE', deleted.[RowVersion], inserted.[RowVersion])
		  %MergeOutputAction%
		  ,IIF($action = 'DELETE', deleted.ModifiedBy, inserted.ModifiedBy)
          ,IIF($action = 'DELETE', deleted.ModifiedOn, inserted.ModifiedOn)
		  ,[Source].Id_Intern
          ,$action -- 'INSERT', 'UPDATE', or 'DELETE'
          ,IIF($action = 'INSERT' AND [Source].Id != 0, CAST('TRUE' AS bit), CAST('FALSE' AS bit))
          ,IIF($action IN ('UPDATE','DELETE') AND [Source].[RowVersion] &lt;&gt; Deleted.[RowVersion], CAST('TRUE' AS bit), CAST('FALSE' AS bit))
	  INTO #output
		   (Id,
	       [RowVersion],
			%StpPropertyNames%   
            Id_Intern,
            MergeAction,
            WasDeleted,
            WasUpdated
           );
		   
IF @@ERROR &lt;&gt; 0
BEGIN
    RETURN
END

SELECT #output.Id,
       #output.[RowVersion],
	   %MergeOutputParameters%
       #output.Id_Intern,
       #output.MergeAction,
       #output.WasDeleted,
       #output.WasUpdated
  FROM #output
	
-- ================================================================================
-- R E S U L T A T E N   V E R I F I Ë R E N
-- ================================================================================

IF EXISTS (SELECT 1
             FROM #output
            WHERE #output.WasDeleted = 'TRUE'
               OR #output.WasUpdated = 'TRUE'
          )
AND @AbortOnConcurrency = 'TRUE'
BEGIN
    RAISERROR('Concurrency problem. One or multiple rows have a different version', 16, 1)
END
	
IF OBJECT_ID('tempdb..#output') IS NOT NULL
BEGIN
    DROP TABLE #output
END

END</value>
  </data>
  <data name="SqlMergeType" xml:space="preserve">
    <value>CREATE TYPE [dbo].[%TableName%MergeType] AS TABLE(
	 [Id] [bigint] NULL	
	,[RowVersion] [varbinary](8) NULL
	%TableProperties%
	,[Delete_Flag] [bit] NULL
	,[Id_Intern] [bigint] NOT NULL
)</value>
  </data>
  <data name="SqlTable" xml:space="preserve">
    <value>CREATE TABLE [dbo].[%TableName%](
	 [Id]			 bigint	IDENTITY (1,1)     NOT NULL
	,[RowVersion]    rowversion         	   NOT NULL
	%TableProperties%
	,[ModifiedBy]	 nvarchar(256)			   NOT NULL
	 CONSTRAINT [DF_%TableName%_ModifiedBy]    DEFAULT SUSER_SNAME()
	,[ModifiedOn]	 datetime2(7)			   NOT NULL
	 CONSTRAINT [DF_%TableName%_ModifiedOn]    DEFAULT SYSDATETIME()
	,[ModifiedOnUTC] datetime2(7)			   NOT NULL
	 CONSTRAINT [DF_%TableName%_ModifiedOnUTC] DEFAULT SYSUTCDATETIME()
	,CONSTRAINT [PK_%TableName%] PRIMARY KEY CLUSTERED (Id ASC)
	 %Constraints%
);</value>
  </data>
  <data name="SqlTableWithUid" xml:space="preserve">
    <value>CREATE TABLE [dbo].[%TableName%](
	 [Id]			bigint	IDENTITY (1,1)  NOT NULL
	,[RowVersion]   rowversion         		NOT NULL
	,[Uid]          uniqueidentifier        NOT NULL CONSTRAINT [DF_{%TableName%}_UId] DEFAULT NEWID()
	%TableProperties%
	,[ModifiedBy]	nvarchar(256)			NOT NULL
	 CONSTRAINT [DF_{%TableName%}_ModifiedBy] DEFAULT SUSER_SNAME()
	,[ModifiedOn]	datetime2(7)			NOT NULL
	 CONSTRAINT [DF_{%TableName%}_ModifiedOn] DEFAULT SYSDATETIME()
	 CONSTRAINT [PK_{%TableName%}] PRIMARY KEY CLUSTERED (Id ASC)
);</value>
  </data>
  <data name="SqlTriggerDelete" xml:space="preserve">
    <value>CREATE TRIGGER [dbo].td_%TableName%
            ON [dbo].%TableName%
		   FOR DELETE
AS
BEGIN
	INSERT
	  INTO [dbo].%TableName%_historie(
			Id,
		    [RowVersion],
           %StpPropertyNames%
		    [ModifiedBy],
		    [ModifiedOn],
		    [DeletedBy],
		    [DeletedAt]
            )
	SELECT Deleted.Id,
	       Deleted.[RowVersion],
		  %StpDeletetedPropertyNames%
		   Deleted.ModifiedBy,
		   Deleted.ModifiedOn,
		   ISNULL(LTRIM(RTRIM(CONVERT(nvarchar(128), CONTEXT_INFO()))), SUSER_SNAME()),
		   SYSDATETIME()
	  FROM Deleted;
END;</value>
  </data>
  <data name="SqlTriggerUpdate" xml:space="preserve">
    <value>CREATE TRIGGER [dbo].tu_%TableName%
            ON [dbo].%TableName%
           FOR UPDATE
AS
BEGIN
    INSERT
      INTO [dbo].%TableName%_historie(
			Id,
		    [RowVersion],
		   %StpPropertyNames%
            [ModifiedBy],
            [ModifiedOn],
            DeletedBy,
            DeletedAt
           )
    SELECT DELETED.Id,
           DELETED.[RowVersion],
		  %StpDeletetedPropertyNames%
           Deleted.ModifiedBy,
           Deleted.ModifiedOn,
           NULL,
           NULL
      FROM Deleted;
END;</value>
  </data>
  <data name="SqlUpdateStp" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[%TableName%_Update]
		@Id [bigint],
		%StpParameter%
        @RowVersion [rowversion],
        @ModifiedBy nvarchar(256)
AS
BEGIN
		SET NOCOUNT ON;
		
		IF OBJECT_ID('tempdb..#Output') IS NOT NULL
		BEGIN
			DROP TABLE #Output;
		END;

		CREATE TABLE #Output ([RowVersion]     binary(8)    NOT NULL
							  ,ModifiedOn      datetime2(7) NOT NULL
							 );

		UPDATE [dbo].%TableName%
		   SET 
				%UpdateSetTableParemeters%            
			    %TableName%.ModifiedBy = ISNULL(@ModifiedBy, SUSER_SNAME()),
			    %TableName%.ModifiedOn = SYSDATETIME()
		OUTPUT Inserted.[RowVersion]
			  ,Inserted.ModifiedOn
		  INTO #Output ([RowVersion]
						,ModifiedOn
					   )
		 WHERE %TableName%.Id = @Id
		   AND %TableName%.[RowVersion] = @RowVersion

		DECLARE @RowCountBig AS bigint = ROWCOUNT_BIG();

		IF @RowCountBig = 0
		BEGIN
            DECLARE @message AS nvarchar(2048) = CONCAT(QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)), '.', OBJECT_NAME(@@PROCID), N': '
													   ,N'Concurrency problem. '
                                                       ,N'The %TableName%-row with Id=', @Id, N' and RowVersion=', CAST(@RowVersion AS binary(8)), N' cannot be altered by ', @ModifiedBy, N'. '
                                                       ,N'The row was already modified by a different user.'
                                                        );
			THROW 55501, @message, 1;
		  END;

		SELECT #Output.[RowVersion]
			  ,#Output.ModifiedOn
          FROM #Output;
END;</value>
  </data>
  <data name="StpParameter" xml:space="preserve">
    <value>StpParameter</value>
  </data>
  <data name="StpParameterName" xml:space="preserve">
    <value>StpParameterName</value>
  </data>
  <data name="StpPropertyNames" xml:space="preserve">
    <value>StpPropertyNames</value>
  </data>
  <data name="TableName" xml:space="preserve">
    <value>TableName</value>
  </data>
  <data name="TableProperties" xml:space="preserve">
    <value>TableProperties</value>
  </data>
  <data name="UpdateSetTableParemeters" xml:space="preserve">
    <value>UpdateSetTableParemeters</value>
  </data>
</root>